import java.util.Arrays;

public class QuickSort {
    static int stepCounter = 0;
    static long timeCounter = 0;

    public static void main(String[] args) {
        int[] arr = {673, 895, 456, 234, 789, 123, 567, 890, 432, 765, 321, 987, 654, 109, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876, 543, 210, 876,
};
        quickSort(arr, 0, arr.length - 1);
        System.out.println("Sorted array: ");
        System.out.println(Arrays.toString(arr));
        System.out.println("Number of steps taken: " + stepCounter);
        System.out.println("Time taken: " + timeCounter + " nanoseconds");
    }

    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            long startTime = System.nanoTime();
            int pivotIndex = partition(arr, low, high);
            long endTime = System.nanoTime();
            timeCounter += endTime - startTime;
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        stepCounter++;
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j <= high - 1; j++) {
            stepCounter++;
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
}
